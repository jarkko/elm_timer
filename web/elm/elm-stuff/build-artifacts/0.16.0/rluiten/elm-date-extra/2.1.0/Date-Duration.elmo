Elm.Date = Elm.Date || {};
Elm.Date.Duration = Elm.Date.Duration || {};
Elm.Date.Duration.make = function (_elm) {
   "use strict";
   _elm.Date = _elm.Date || {};
   _elm.Date.Duration = _elm.Date.Duration || {};
   if (_elm.Date.Duration.values) return _elm.Date.Duration.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Date$Core = Elm.Date.Core.make(_elm),
   $Date$Period = Elm.Date.Period.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var addMonthNegative = F3(function (goalDay,monthCount,date) {
      addMonthNegative: while (true) {
         var prevMonthMaxDay = $Date$Core.daysInPrevMonth(date);
         var prevMonthTargetDay = A2($Basics.min,goalDay,prevMonthMaxDay);
         var addDays = 0 - $Date.day(date) - (prevMonthMaxDay - prevMonthTargetDay);
         var prevMonth = A3($Date$Period.add,$Date$Period.Day,addDays,date);
         if (_U.eq(monthCount,0)) return date; else {
               var _v0 = goalDay,_v1 = monthCount + 1,_v2 = prevMonth;
               goalDay = _v0;
               monthCount = _v1;
               date = _v2;
               continue addMonthNegative;
            }
      }
   });
   var addMonthPositive = F3(function (goalDay,monthCount,date) {
      addMonthPositive: while (true) {
         var nextMonthMaxDay = $Date$Core.daysInNextMonth(date);
         var nextMonthTargetDay = A2($Basics.min,goalDay,nextMonthMaxDay);
         var thisMonthMaxDay = $Date$Core.daysInMonthDate(date);
         var addDays = thisMonthMaxDay - $Date.day(date) + nextMonthTargetDay;
         var nextMonth = A3($Date$Period.add,$Date$Period.Day,addDays,date);
         if (_U.eq(monthCount,0)) return date; else {
               var _v3 = goalDay,_v4 = monthCount - 1,_v5 = nextMonth;
               goalDay = _v3;
               monthCount = _v4;
               date = _v5;
               continue addMonthPositive;
            }
      }
   });
   var addMonth = F2(function (monthCount,date) {
      var goalDay = $Date.day(date);
      return _U.eq(monthCount,0) ? date : _U.cmp(monthCount,0) > 0 ? A3(addMonthPositive,goalDay,monthCount,date) : A3(addMonthNegative,
      goalDay,
      monthCount,
      date);
   });
   var addYear = F2(function (yearCount,date) {    return A2(addMonth,12 * yearCount,date);});
   var add = function (duration) {
      var _p0 = duration;
      switch (_p0.ctor)
      {case "Millisecond": return $Date$Period.add($Date$Period.Millisecond);
         case "Second": return $Date$Period.add($Date$Period.Second);
         case "Minute": return $Date$Period.add($Date$Period.Minute);
         case "Hour": return $Date$Period.add($Date$Period.Hour);
         case "Day": return $Date$Period.add($Date$Period.Day);
         case "Week": return $Date$Period.add($Date$Period.Week);
         case "Month": return addMonth;
         default: return addYear;}
   };
   var Year = {ctor: "Year"};
   var Month = {ctor: "Month"};
   var Week = {ctor: "Week"};
   var Day = {ctor: "Day"};
   var Hour = {ctor: "Hour"};
   var Minute = {ctor: "Minute"};
   var Second = {ctor: "Second"};
   var Millisecond = {ctor: "Millisecond"};
   return _elm.Date.Duration.values = {_op: _op
                                      ,add: add
                                      ,Millisecond: Millisecond
                                      ,Second: Second
                                      ,Minute: Minute
                                      ,Hour: Hour
                                      ,Day: Day
                                      ,Week: Week
                                      ,Month: Month
                                      ,Year: Year};
};