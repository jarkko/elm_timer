Elm.Date = Elm.Date || {};
Elm.Date.Create = Elm.Date.Create || {};
Elm.Date.Create.make = function (_elm) {
   "use strict";
   _elm.Date = _elm.Date || {};
   _elm.Date.Create = _elm.Date.Create || {};
   if (_elm.Date.Create.values) return _elm.Date.Create.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Date$Core = Elm.Date.Core.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var iterateSum = F5(function (getNext,getValue,target,current,accumulator) {
      iterateSum: while (true) if (_U.eq(current,target)) return accumulator; else {
            var _v0 = getNext,_v1 = getValue,_v2 = target,_v3 = getNext(current),_v4 = accumulator + getValue(current);
            getNext = _v0;
            getValue = _v1;
            target = _v2;
            current = _v3;
            accumulator = _v4;
            continue iterateSum;
         }
   });
   var monthToTicks = F2(function (year,month) {    return A2($Date$Core.daysInMonth,year,month) * $Date$Core.ticksADay;});
   var getMonthTicksToEndYear = F2(function (year,month) {
      return A5(iterateSum,$Date$Core.nextMonth,monthToTicks(year),$Date.Jan,$Date$Core.nextMonth(month),0);
   });
   var getMonthTicksSinceStartOfYear = F2(function (year,month) {    return A5(iterateSum,$Date$Core.nextMonth,monthToTicks(year),month,$Date.Jan,0);});
   var yearToTicks = function (year) {    return $Date$Core.yearToDayLength(year) * $Date$Core.ticksADay;};
   var getYearTicksTo1970 = function (year) {    return A5(iterateSum,F2(function (x,y) {    return x + y;})(1),yearToTicks,1970,year + 1,0);};
   var makeDateTicksNegative = function (date) {
      var millisecondsToEndOfSecond = 1000 - $Date.millisecond(date);
      var millisecondTicks = millisecondsToEndOfSecond * $Date$Core.ticksAMillisecond;
      var secondsToEndOfMinute = 60 - $Date.second(date) - 1;
      var secondTicks = secondsToEndOfMinute * $Date$Core.ticksASecond;
      var minutesToEndOfHour = 60 - $Date.minute(date) - 1;
      var minuteTicks = minutesToEndOfHour * $Date$Core.ticksAMinute;
      var hoursToEndOfDay = 24 - $Date.hour(date) - 1;
      var hourTicks = hoursToEndOfDay * $Date$Core.ticksAnHour;
      var month = $Date.month(date);
      var year = $Date.year(date);
      var yearTicks = getYearTicksTo1970(year);
      var monthTicks = A2(getMonthTicksToEndYear,year,month);
      var daysToEndOfMonth = A2($Date$Core.daysInMonth,year,month) - $Date.day(date);
      var dayTicks = daysToEndOfMonth * $Date$Core.ticksADay;
      return $Basics.negate(yearTicks + monthTicks + dayTicks + hourTicks + minuteTicks + secondTicks + millisecondTicks);
   };
   var getYearTicksFrom1970 = function (year) {    return A5(iterateSum,F2(function (x,y) {    return x + y;})(1),yearToTicks,year,1970,0);};
   var makeDateTicksPositive = function (date) {
      var day = $Date.day(date);
      var restTicks = $Date.millisecond(date) * $Date$Core.ticksAMillisecond + $Date.second(date) * $Date$Core.ticksASecond + $Date.minute(date) * $Date$Core.ticksAMinute + $Date.hour(date) * $Date$Core.ticksAnHour + (day - 1) * $Date$Core.ticksADay;
      var month = $Date.month(date);
      var year = $Date.year(date);
      var yearTicks = getYearTicksFrom1970(year);
      var monthTicks = A2(getMonthTicksSinceStartOfYear,year,month);
      return yearTicks + monthTicks + restTicks;
   };
   var makeDateTicks = function (date) {
      var year = $Date.year(date);
      return _U.cmp(year,1970) < 0 ? makeDateTicksNegative(date) : makeDateTicksPositive(date);
   };
   var getTimezoneOffset = function (date) {
      var date = function () {
         var _p0 = $Date.fromString($Date$Core.epochDateStr);
         if (_p0.ctor === "Ok") {
               return _p0._0;
            } else {
               return _U.crashCase("Date.Create",
               {start: {line: 176,column: 7},end: {line: 178,column: 89}},
               _p0)("Failed to parse unix epoch date something is very wrong.");
            }
      }();
      var dateTicks = $Date$Core.toTime(date);
      var newTicks = makeDateTicks(date);
      var timezoneOffset = (dateTicks - newTicks) / $Date$Core.ticksAMinute | 0;
      return timezoneOffset;
   };
   return _elm.Date.Create.values = {_op: _op,makeDateTicks: makeDateTicks,getTimezoneOffset: getTimezoneOffset};
};