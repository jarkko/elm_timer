Elm.Date = Elm.Date || {};
Elm.Date.Utils = Elm.Date.Utils || {};
Elm.Date.Utils.make = function (_elm) {
   "use strict";
   _elm.Date = _elm.Date || {};
   _elm.Date.Utils = _elm.Date.Utils || {};
   if (_elm.Date.Utils.values) return _elm.Date.Utils.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Date$Compare = Elm.Date.Compare.make(_elm),
   $Date$Core = Elm.Date.Core.make(_elm),
   $Date$Field = Elm.Date.Field.make(_elm),
   $Date$Floor = Elm.Date.Floor.make(_elm),
   $Date$Format = Elm.Date.Format.make(_elm),
   $Date$Period = Elm.Date.Period.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Regex = Elm.Regex.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var dateFromFields = F7(function (year,month,day,hour,minute,second,millisecond) {
      return A2($Date$Field.fieldToDateClamp,
      $Date$Field.Millisecond(millisecond),
      A2($Date$Field.fieldToDateClamp,
      $Date$Field.Second(second),
      A2($Date$Field.fieldToDateClamp,
      $Date$Field.Minute(minute),
      A2($Date$Field.fieldToDateClamp,
      $Date$Field.Hour(hour),
      A2($Date$Field.fieldToDateClamp,
      $Date$Field.DayOfMonth(day),
      A2($Date$Field.fieldToDateClamp,$Date$Field.Month(month),A2($Date$Field.fieldToDateClamp,$Date$Field.Year(year),$Date.fromTime(0))))))));
   });
   var timeFromFields = A3(dateFromFields,1970,$Date.Jan,1);
   var checkDateResult = F2(function (dateStr,date) {
      var endsWithUTCOffset = A2($String.endsWith,"Z",dateStr) || (A2($String.endsWith,"+00:00",dateStr) || (A2($String.endsWith,
      "+0000",
      dateStr) || A2($String.endsWith,"+00",dateStr)));
      var checkDatePart = endsWithUTCOffset ? $Date$Format.utcIsoDateString(date) : $Date$Format.isoDateString(date);
      var extraCheck = $Regex.regex("^\\d{4}-\\d{1,2}-\\d{1,2}");
      return A2($Regex.contains,extraCheck,dateStr) ? A2($String.startsWith,checkDatePart,dateStr) ? $Result.Ok(date) : $Result.Err(A2($Basics._op["++"],
      "Error leading date part got converted from \"",
      A2($Basics._op["++"],dateStr,A2($Basics._op["++"],"\" to \"",A2($Basics._op["++"],checkDatePart,"\""))))) : $Result.Ok(date);
   });
   var fromString = function (dateStr) {    return A2($Result.andThen,$Date.fromString(dateStr),checkDateResult(dateStr));};
   var unsafeFromString = function (dateStr) {
      var _p0 = fromString(dateStr);
      if (_p0.ctor === "Ok") {
            return _p0._0;
         } else {
            return _U.crashCase("Date.Utils",{start: {line: 132,column: 3},end: {line: 134,column: 47}},_p0)("unsafeFromString");
         }
   };
   var isoDayofWeekMonday = $Date$Core.isoDayOfWeek($Date.Mon);
   var isoWeekOne = function (year) {
      var date = unsafeFromString(A2($Basics._op["++"],$Basics.toString(year),"/01/04"));
      var isoDow = $Date$Core.isoDayOfWeek($Date.dayOfWeek(date));
      return A3($Date$Period.add,$Date$Period.Day,isoDayofWeekMonday - isoDow,date);
   };
   var isoWeek = function (date) {
      var dateAsDay = A2($Date$Floor.floor,$Date$Floor.Day,date);
      var inputYear = $Date.year(date);
      var endOfYearMaxIsoWeekDate = unsafeFromString(A2($Basics._op["++"],$Basics.toString(inputYear),"/12/29"));
      var _p2 = function () {
         if (A3($Date$Compare.is,$Date$Compare.SameOrAfter,date,endOfYearMaxIsoWeekDate)) {
               var nextYearIsoWeek1 = isoWeekOne(inputYear + 1);
               return A3($Date$Compare.is,$Date$Compare.Before,date,nextYearIsoWeek1) ? {ctor: "_Tuple2"
                                                                                        ,_0: inputYear
                                                                                        ,_1: isoWeekOne(inputYear)} : {ctor: "_Tuple2"
                                                                                                                      ,_0: inputYear + 1
                                                                                                                      ,_1: nextYearIsoWeek1};
            } else {
               var thisYearIsoWeek1 = isoWeekOne(inputYear);
               return A3($Date$Compare.is,$Date$Compare.Before,date,thisYearIsoWeek1) ? {ctor: "_Tuple2"
                                                                                        ,_0: inputYear - 1
                                                                                        ,_1: isoWeekOne(inputYear - 1)} : {ctor: "_Tuple2"
                                                                                                                          ,_0: inputYear
                                                                                                                          ,_1: thisYearIsoWeek1};
            }
      }();
      var year = _p2._0;
      var week1 = _p2._1;
      var daysSinceWeek1 = ($Date$Core.toTime(dateAsDay) - $Date$Core.toTime(week1)) / $Date$Core.ticksADay | 0;
      return {ctor: "_Tuple3",_0: year,_1: (daysSinceWeek1 / 7 | 0) + 1,_2: $Date$Core.isoDayOfWeek($Date.dayOfWeek(date))};
   };
   var dayList$ = F3(function (dayLength,date,list) {
      dayList$: while (true) if (_U.eq(dayLength,0)) return list; else {
            var _v1 = dayLength - 1,_v2 = A3($Date$Period.add,$Date$Period.Day,1,date),_v3 = A2($List._op["::"],date,list);
            dayLength = _v1;
            date = _v2;
            list = _v3;
            continue dayList$;
         }
   });
   var dayList = F2(function (dayLength,startDate) {    return $List.reverse(A3(dayList$,dayLength,startDate,_U.list([])));});
   return _elm.Date.Utils.values = {_op: _op
                                   ,fromString: fromString
                                   ,unsafeFromString: unsafeFromString
                                   ,dayList: dayList
                                   ,isoWeek: isoWeek
                                   ,isoWeekOne: isoWeekOne
                                   ,timeFromFields: timeFromFields
                                   ,dateFromFields: dateFromFields};
};