Elm.Date = Elm.Date || {};
Elm.Date.Period = Elm.Date.Period || {};
Elm.Date.Period.make = function (_elm) {
   "use strict";
   _elm.Date = _elm.Date || {};
   _elm.Date.Period = _elm.Date.Period || {};
   if (_elm.Date.Period.values) return _elm.Date.Period.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Date$Core = Elm.Date.Core.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var addTimeUnit = F3(function (unit,addend,date) {
      return $Date$Core.fromTime(A2(F2(function (x,y) {    return x + y;}),addend * unit,$Date$Core.toTime(date)));
   });
   var toTicks = function (period) {
      var _p0 = period;
      switch (_p0.ctor)
      {case "Millisecond": return $Date$Core.ticksAMillisecond;
         case "Second": return $Date$Core.ticksASecond;
         case "Minute": return $Date$Core.ticksAMinute;
         case "Hour": return $Date$Core.ticksAnHour;
         case "Day": return $Date$Core.ticksADay;
         case "Week": return $Date$Core.ticksAWeek;
         default: var _p1 = _p0._0;
           return $Date$Core.ticksAMillisecond * _p1.millisecond + $Date$Core.ticksASecond * _p1.second + $Date$Core.ticksAMinute * _p1.minute + $Date$Core.ticksAnHour * _p1.hour + $Date$Core.ticksADay * _p1.day + $Date$Core.ticksAWeek * _p1.week;}
   };
   var add = function (period) {    return addTimeUnit(toTicks(period));};
   var zeroDelta = {week: 0,day: 0,hour: 0,minute: 0,second: 0,millisecond: 0};
   var DeltaRecord = F6(function (a,b,c,d,e,f) {    return {week: a,day: b,hour: c,minute: d,second: e,millisecond: f};});
   var Delta = function (a) {    return {ctor: "Delta",_0: a};};
   var diff = F2(function (date1,date2) {
      var millisecondDiff = $Date.millisecond(date1) - $Date.millisecond(date2);
      var secondDiff = $Date.second(date1) - $Date.second(date2);
      var minuteDiff = $Date.minute(date1) - $Date.minute(date2);
      var hourDiff = $Date.hour(date1) - $Date.hour(date2);
      var ticksDiff = $Date$Core.toTime(date1) - $Date$Core.toTime(date2);
      var ticksDayDiff = ticksDiff - hourDiff * $Date$Core.ticksAnHour - minuteDiff * $Date$Core.ticksAMinute - secondDiff * $Date$Core.ticksASecond - millisecondDiff * $Date$Core.ticksAMillisecond;
      var onlylDaysDiff = ticksDayDiff / $Date$Core.ticksADay | 0;
      var _p2 = function () {
         if (_U.cmp(onlylDaysDiff,0) < 0) {
               var absDayDiff = $Basics.abs(onlylDaysDiff);
               return {ctor: "_Tuple2",_0: $Basics.negate(absDayDiff / 7 | 0),_1: $Basics.negate(A2($Basics._op["%"],absDayDiff,7))};
            } else return {ctor: "_Tuple2",_0: onlylDaysDiff / 7 | 0,_1: A2($Basics._op["%"],onlylDaysDiff,7)};
      }();
      var weekDiff = _p2._0;
      var dayDiff = _p2._1;
      return Delta({week: weekDiff,day: dayDiff,hour: hourDiff,minute: minuteDiff,second: secondDiff,millisecond: millisecondDiff});
   });
   var Week = {ctor: "Week"};
   var Day = {ctor: "Day"};
   var Hour = {ctor: "Hour"};
   var Minute = {ctor: "Minute"};
   var Second = {ctor: "Second"};
   var Millisecond = {ctor: "Millisecond"};
   return _elm.Date.Period.values = {_op: _op
                                    ,add: add
                                    ,zeroDelta: zeroDelta
                                    ,diff: diff
                                    ,DeltaRecord: DeltaRecord
                                    ,Millisecond: Millisecond
                                    ,Second: Second
                                    ,Minute: Minute
                                    ,Hour: Hour
                                    ,Day: Day
                                    ,Week: Week
                                    ,Delta: Delta};
};