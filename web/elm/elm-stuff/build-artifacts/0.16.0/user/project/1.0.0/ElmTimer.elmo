Elm.ElmTimer = Elm.ElmTimer || {};
Elm.ElmTimer.make = function (_elm) {
   "use strict";
   _elm.ElmTimer = _elm.ElmTimer || {};
   if (_elm.ElmTimer.values) return _elm.ElmTimer.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random$PCG = Elm.Random.PCG.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $String = Elm.String.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var nameFor = F2(function (uuid,runners) {
      return function (r) {
         return A2($Basics._op["++"],r.first_name,A2($Basics._op["++"]," ",r.last_name));
      }(A2($Maybe.withDefault,
      {id: "123",first_name: "Foo",last_name: "Bar"},
      $List.head(A2($List.filter,function (r) {    return _U.eq(r.id,uuid) && _U.cmp($String.length(uuid),0) > 0;},runners))));
   });
   var resultItem = F2(function (runners,result) {
      return A2($Html.li,
      _U.list([$Html$Attributes.$class("result")]),
      _U.list([$Html.text(A2(nameFor,result.runner_id,runners)),$Html.text(", "),$Html.text($Basics.toString(result.time))]));
   });
   var paddedTime = function (t) {    return A3($String.padLeft,2,_U.chr("0"),t);};
   var currentTime = function (t) {
      var date$ = $Date.fromTime(t);
      var hour$ = $Basics.toString($Date.hour(date$));
      var minute$ = $Basics.toString($Date.minute(date$));
      var second$ = $Basics.toString($Date.second(date$));
      var now = A2($Basics._op["++"],
      "The current time is: ",
      A2($Basics._op["++"],
      paddedTime(hour$),
      A2($Basics._op["++"],":",A2($Basics._op["++"],paddedTime(minute$),A2($Basics._op["++"],":",paddedTime(second$))))));
      var year$ = $Basics.toString($Date.year(date$));
      return $Html.text(now);
   };
   var timer = function (model) {
      return _U.eq(model.timer.start_time,$Maybe.Nothing) ? A2($Html.div,
      _U.list([$Html$Attributes.$class("clock")]),
      _U.list([$Html.text("Not started")])) : A2($Html.div,
      _U.list([$Html$Attributes.$class("clock")]),
      _U.list([currentTime(model.current_time - A2($Maybe.withDefault,0,model.timer.start_time))]));
   };
   var update = F2(function (action,model) {
      var _p0 = action;
      if (_p0.ctor === "Tick") {
            var new_model = _U.update(model,{current_time: _p0._0});
            return {ctor: "_Tuple2",_0: new_model,_1: $Effects.none};
         } else {
            var new_model = _U.update(model,{timer: {start_time: $Maybe.Just(model.current_time)}});
            return {ctor: "_Tuple2",_0: new_model,_1: $Effects.none};
         }
   });
   var Start = {ctor: "Start"};
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("main")]),
      _U.list([A2($Html.div,_U.list([$Html$Attributes.$class("clock")]),_U.list([currentTime(model.current_time)]))
              ,timer(model)
              ,A2($Html.ul,_U.list([$Html$Attributes.$class("results")]),A2($List.map,resultItem(model.runners),model.results))
              ,A2($Html.div,_U.list([]),_U.list([A2($Html.button,_U.list([A2($Html$Events.onClick,address,Start)]),_U.list([$Html.text("Start Timer")]))]))]));
   });
   var Tick = function (a) {    return {ctor: "Tick",_0: a};};
   var Model = F4(function (a,b,c,d) {    return {runners: a,timer: b,results: c,current_time: d};});
   var Result = F2(function (a,b) {    return {runner_id: a,time: b};});
   var Runner = F3(function (a,b,c) {    return {first_name: a,last_name: b,id: c};});
   var Timer = function (a) {    return {start_time: a};};
   var init = {runners: _U.list([{first_name: "Jarkko",last_name: "Laine",id: "abcde"},{first_name: "Tarmo",last_name: "TÃ¤nav",id: "abcdef"}])
              ,results: _U.list([{runner_id: "abcde",time: 12345},{runner_id: "abcdef",time: 12347}])
              ,timer: {start_time: $Maybe.Nothing}
              ,current_time: 0};
   var app = $StartApp.start({init: {ctor: "_Tuple2",_0: init,_1: $Effects.none}
                             ,update: update
                             ,view: view
                             ,inputs: _U.list([A2($Signal.map,function (t) {    return Tick(t);},$Time.every($Time.second))])});
   var main = app.html;
   var randomSeed = Elm.Native.Port.make(_elm).inbound("randomSeed",
   "( Int, Int )",
   function (v) {
      return typeof v === "object" && v instanceof Array ? {ctor: "_Tuple2"
                                                           ,_0: typeof v[0] === "number" && isFinite(v[0]) && Math.floor(v[0]) === v[0] ? v[0] : _U.badPort("an integer",
                                                           v[0])
                                                           ,_1: typeof v[1] === "number" && isFinite(v[1]) && Math.floor(v[1]) === v[1] ? v[1] : _U.badPort("an integer",
                                                           v[1])} : _U.badPort("an array",v);
   });
   var seed0 = A2($Basics.uncurry,$Random$PCG.initialSeed2,randomSeed);
   return _elm.ElmTimer.values = {_op: _op
                                 ,seed0: seed0
                                 ,init: init
                                 ,app: app
                                 ,main: main
                                 ,Timer: Timer
                                 ,Runner: Runner
                                 ,Result: Result
                                 ,Model: Model
                                 ,Tick: Tick
                                 ,Start: Start
                                 ,update: update
                                 ,paddedTime: paddedTime
                                 ,currentTime: currentTime
                                 ,timer: timer
                                 ,view: view
                                 ,resultItem: resultItem
                                 ,nameFor: nameFor};
};